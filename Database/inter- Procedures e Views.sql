-- MySQL Script generated by MySQL Workbench
-- 10/30/14 23:57:20
-- Model: New Model    Version: 1.0
-- MySQL Workbench Forward Engineering

SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0;
SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0;
SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='TRADITIONAL,ALLOW_INVALID_DATES';

-- -----------------------------------------------------
-- Schema inter
-- -----------------------------------------------------

-- -----------------------------------------------------
-- Schema inter
-- -----------------------------------------------------
CREATE SCHEMA IF NOT EXISTS `inter` DEFAULT CHARACTER SET utf8 COLLATE utf8_general_ci ;
USE `inter` ;
USE `inter` ;

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`alt_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`alt_view` (`alt_codigo` INT, `alt_alternativa` INT, `alt_peso` INT, `per_codigo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`cla_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`cla_view` (`cla_codigo` INT, `cla_pontosMax` INT, `cla_descricao` INT, `cla_nome` INT);

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`mod_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`mod_view` (`mod_codigo` INT, `mod_nome` INT, `mod_habilitado` INT, `mod_editar` INT, `mod_descricao` INT, `tim_codigo` INT, `habilitado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`per_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`per_view` (`per_codigo` INT, `per_pergunta` INT, `mod_codigo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`mev_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`mev_view` (`mod_codigo` INT, `eve_codigo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`mod_editar_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`mod_editar_view` (`mod_codigo` INT, `mod_nome` INT, `mod_habilitado` INT, `mod_editar` INT, `mod_descricao` INT, `tim_codigo` INT);

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`mod_investidor_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`mod_investidor_view` (`mod_codigo` INT, `mod_nome` INT, `mod_habilitado` INT, `mod_editar` INT, `mod_descricao` INT, `tim_codigo` INT, `habilitado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`mod_financeira_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`mod_financeira_view` (`mod_codigo` INT, `mod_nome` INT, `mod_habilitado` INT, `mod_editar` INT, `mod_descricao` INT, `tim_codigo` INT, `habilitado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`mod_empresarial_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`mod_empresarial_view` (`mod_codigo` INT, `mod_nome` INT, `mod_habilitado` INT, `mod_editar` INT, `mod_descricao` INT, `tim_codigo` INT, `habilitado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`mod_investidor_editar_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`mod_investidor_editar_view` (`mod_codigo` INT, `mod_nome` INT, `mod_habilitado` INT, `mod_editar` INT, `mod_descricao` INT, `tim_codigo` INT, `habilitado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`mod_financeira_editar_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`mod_financeira_editar_view` (`mod_codigo` INT, `mod_nome` INT, `mod_habilitado` INT, `mod_editar` INT, `mod_descricao` INT, `tim_codigo` INT, `habilitado` INT);

-- -----------------------------------------------------
-- Placeholder table for view `inter`.`mod_empresarial_editar_view`
-- -----------------------------------------------------
CREATE TABLE IF NOT EXISTS `inter`.`mod_empresarial_editar_view` (`mod_codigo` INT, `mod_nome` INT, `mod_habilitado` INT, `mod_editar` INT, `mod_descricao` INT, `tim_codigo` INT, `habilitado` INT);

-- -----------------------------------------------------
-- procedure mod_insert
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`mod_insert`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE mod_insert (nome TEXT, descricao TEXT, tipo INTEGER)
BEGIN
	INSERT INTO mod_modelos (mod_nome, mod_descricao, tim_codigo) 
	VALUES (nome, descricao, tipo);
	SELECT LAST_INSERT_ID();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure per_insert
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`per_insert`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE per_insert (pergunta TEXT, modelo INTEGER)
BEGIN
	INSERT INTO per_perguntas (per_pergunta, mod_codigo) 
	VALUES (pergunta, modelo);
	SELECT LAST_INSERT_ID();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure alt_insert
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`alt_insert`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE alt_insert (alternativa TEXT, peso DOUBLE, pergunta INTEGER)
BEGIN
	INSERT INTO alt_alternativas (`alt_alternativa`, `alt_peso`, `per_codigo`) 
	VALUES (alternativa, peso, pergunta);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cla_insert
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`cla_insert`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE cla_insert (max DOUBLE, descricao TEXT, nome TEXT)
BEGIN
	INSERT INTO cla_classificacoes (cla_pontosMax, cla_descricao, cla_nome) 
	VALUES (max, descricao, nome);
	SELECT LAST_INSERT_ID();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure que_inicio
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`que_inicio`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE que_inicio (evento INTEGER, inicio DATETIME, usuario INTEGER)
BEGIN
	INSERT INTO que_questionarios (eve_codigo, que_inicio, usu_codigo) 
	VALUES (evento, inicio, usuario);
	SELECT LAST_INSERT_ID();
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure res_insert
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`res_insert`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE res_insert (questao INTEGER, alternativa INTEGER)
BEGIN
	INSERT INTO res_respostas (que_codigo, alt_codigo) 
	VALUES (questionario, alternativa);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure moc_insert
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`moc_insert`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE moc_insert (modelo INTEGER, classificacao INTEGER)
BEGIN
	INSERT INTO moc_modeloClassificacao(mod_codigo, cla_codigo) 
	VALUES (modelo, classificacao);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mod_ativar
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`mod_ativar`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE mod_ativar (modelo INTEGER, evento INTEGER)
BEGIN
	INSERT INTO mev_modelosEventos (mod_codigo, eve_codigo) 
	VALUES (modelo, evento);
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mod_update
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`mod_update`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE mod_update (codigo INTEGER, nome TEXT, descricao TEXT, tipo INTEGER)
BEGIN
	UPDATE mod_modelos
	SET
	mod_nome = nome,
	mod_descricao = descricao,
	tim_codigo = tipo
	WHERE mod_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mod_habilitar
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`mod_habilitar`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE mod_habilitar (codigo INTEGER, habilitar INTEGER)
BEGIN
	UPDATE mod_modelos
	SET
	mod_habilitado = habilitar
	WHERE mod_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mod_editar
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`mod_editar`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE mod_editar (codigo INTEGER)
BEGIN
	UPDATE mod_modelos
	SET
	mod_editar = 0
	WHERE mod_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure per_update
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`per_update`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE per_update (codigo INTEGER, pergunta TEXT)
BEGIN
	UPDATE per_perguntas
	SET
	per_pergunta = pergunta
	WHERE per_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure alt_update
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`alt_update`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE alt_update (codigo INTEGER, alternativa TEXT, peso DOUBLE)
BEGIN
	UPDATE alt_alternativas
	SET
	alt_alternativa = alternativa,
	alt_peso = peso
	WHERE alt_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cla_update
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`cla_update`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE cla_update (codigo INTEGER, pontosMax DOUBLE, descricao TEXT, nome TEXT)
BEGIN
	UPDATE cla_classificacoes
	SET
	cla_pontosMax = pontosMax,
	cla_descricao = descricao,
	cla_nome = nome
	WHERE cla_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure que_fim
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`que_fim`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE que_fim (codigo INTEGER, pontos DOUBLE, modelo INTEGER, classificacao INTEGER, fim DATETIME)
BEGIN
	UPDATE que_questionarios
	SET
	que_pontos = pontos,
	mod_codigo = modelo,
	cla_codigo = classificacao,
	que_fim = fim
	WHERE que_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mod_desativar
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`mod_desativar`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE mod_desativar (modelo INTEGER, evento INTEGER)
BEGIN
	DELETE FROM mev_modelosEventos
	WHERE
	mod_codigo = modelo
	AND
	eve_codigo = evento;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure alt_delete
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`alt_delete`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE alt_delete (codigo INTEGER)
BEGIN
	DELETE FROM alt_alternativas
	WHERE alt_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure alt_select
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`alt_select`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE alt_select (codigo INTEGER)
BEGIN
	SELECT * FROM alt_alternativas
	WHERE alt_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cla_delete
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`cla_delete`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE cla_delete (codigo INTEGER)
BEGIN
	DELETE FROM cla_classificacoes
	WHERE cla_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure cla_select
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`cla_select`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE cla_select (codigo INTEGER)
BEGIN
	SELECT * FROM cla_classificacoes
	WHERE cla_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mod_select
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`mod_select`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE mod_select (codigo INTEGER)
BEGIN
	SELECT *, if(mod_habilitado = 0, 'Desabilitado', 'Habilitado') as habilitado FROM mod_modelos
	WHERE mod_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure per_delete
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`per_delete`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE per_delete (codigo INTEGER)
BEGIN
	DELETE FROM per_perguntas
	WHERE per_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure per_select
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`per_select`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE per_select (codigo INTEGER)
BEGIN
	SELECT * FROM per_perguntas
	WHERE per_codigo = codigo;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure moc_delete
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`moc_delete`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE moc_delete (modelo INTEGER, classificacao INTEGER)
BEGIN
	DELETE FROM moc_modeloClassificacao 
	WHERE mod_codigo = modelo AND cla_codigo = classificacao;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- procedure mod_aplicar
-- -----------------------------------------------------

USE `inter`;
DROP procedure IF EXISTS `inter`.`mod_aplicar`;

DELIMITER $$
USE `inter`$$
CREATE PROCEDURE mod_aplicar (codigo INTEGER)
BEGIN
	SELECT moo.*, group_concat(distinct cla.cla_codigo, '-', cla_nome, '-', cla_descricao, '-', cla_pontosMax) as classificacao, per.*, alt.alt_codigo, alt.alt_alternativa, alt.alt_peso, alt.per_codigo as alt_per_codigo  FROM mod_modelos moo
	INNER JOIN per_perguntas per USING(mod_codigo)
	INNER JOIN alt_alternativas alt USING(per_codigo) 
	INNER JOIN moc_modeloClassificacao moc USING(mod_codigo)
	INNER JOIN cla_classificacoes cla USING(cla_codigo)
	WHERE mod_codigo = codigo
	group by moo.mod_codigo, per_codigo, alt_codigo
	order by per_codigo, alt_alternativa;
END$$

DELIMITER ;

-- -----------------------------------------------------
-- View `inter`.`alt_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`alt_view` ;
DROP TABLE IF EXISTS `inter`.`alt_view`;
USE `inter`;
CREATE  OR REPLACE VIEW alt_view AS
SELECT * FROM alt_alternativas;


-- -----------------------------------------------------
-- View `inter`.`cla_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`cla_view` ;
DROP TABLE IF EXISTS `inter`.`cla_view`;
USE `inter`;
CREATE  OR REPLACE VIEW cla_view AS
SELECT * FROM cla_classificacoes;


-- -----------------------------------------------------
-- View `inter`.`mod_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`mod_view` ;
DROP TABLE IF EXISTS `inter`.`mod_view`;
USE `inter`;
CREATE  OR REPLACE VIEW mod_view AS
SELECT *, if(mod_habilitado = 0, 'Desabilitado', 'Habilitado') as habilitado FROM mod_modelos;


-- -----------------------------------------------------
-- View `inter`.`per_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`per_view` ;
DROP TABLE IF EXISTS `inter`.`per_view`;
USE `inter`;
CREATE  OR REPLACE VIEW per_view AS
SELECT * FROM per_perguntas;


-- -----------------------------------------------------
-- View `inter`.`mev_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`mev_view` ;
DROP TABLE IF EXISTS `inter`.`mev_view`;
USE `inter`;
CREATE  OR REPLACE VIEW mev_view AS
SELECT * FROM mev_modelosEventos;


-- -----------------------------------------------------
-- View `inter`.`mod_editar_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`mod_editar_view` ;
DROP TABLE IF EXISTS `inter`.`mod_editar_view`;
USE `inter`;
CREATE  OR REPLACE VIEW mod_editar_view AS
SELECT * FROM mod_modelos
WHERE mod_editar = 1;


-- -----------------------------------------------------
-- View `inter`.`mod_investidor_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`mod_investidor_view` ;
DROP TABLE IF EXISTS `inter`.`mod_investidor_view`;
USE `inter`;
CREATE  OR REPLACE VIEW mod_investidor_view AS
SELECT *, if(mod_habilitado = 0, 'Desabilitado', 'Habilitado') as habilitado FROM mod_modelos WHERE tim_codigo = 1;


-- -----------------------------------------------------
-- View `inter`.`mod_financeira_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`mod_financeira_view` ;
DROP TABLE IF EXISTS `inter`.`mod_financeira_view`;
USE `inter`;
CREATE  OR REPLACE VIEW mod_financeira_view AS
SELECT *, if(mod_habilitado = 0, 'Desabilitado', 'Habilitado') as habilitado FROM mod_modelos WHERE tim_codigo = 2;


-- -----------------------------------------------------
-- View `inter`.`mod_empresarial_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`mod_empresarial_view` ;
DROP TABLE IF EXISTS `inter`.`mod_empresarial_view`;
USE `inter`;
CREATE  OR REPLACE VIEW mod_empresarial_view AS
SELECT *, if(mod_habilitado = 0, 'Desabilitado', 'Habilitado') as habilitado FROM mod_modelos WHERE tim_codigo = 3;


-- -----------------------------------------------------
-- View `inter`.`mod_investidor_editar_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`mod_investidor_editar_view` ;
DROP TABLE IF EXISTS `inter`.`mod_investidor_editar_view`;
USE `inter`;
CREATE  OR REPLACE VIEW mod_investidor_editar_view AS
SELECT *, if(mod_habilitado = 0, 'Desabilitado', 'Habilitado') as habilitado FROM mod_modelos WHERE tim_codigo = 1 AND mod_editar = true;


-- -----------------------------------------------------
-- View `inter`.`mod_financeira_editar_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`mod_financeira_editar_view` ;
DROP TABLE IF EXISTS `inter`.`mod_financeira_editar_view`;
USE `inter`;
CREATE  OR REPLACE VIEW mod_financeira_editar_view AS
SELECT *, if(mod_habilitado = 0, 'Desabilitado', 'Habilitado') as habilitado FROM mod_modelos WHERE tim_codigo = 2 AND tim_codigo = 2;


-- -----------------------------------------------------
-- View `inter`.`mod_empresarial_editar_view`
-- -----------------------------------------------------
DROP VIEW IF EXISTS `inter`.`mod_empresarial_editar_view` ;
DROP TABLE IF EXISTS `inter`.`mod_empresarial_editar_view`;
USE `inter`;
CREATE  OR REPLACE VIEW mod_empresarial_editar_view AS
SELECT *, if(mod_habilitado = 0, 'Desabilitado', 'Habilitado') as habilitado FROM mod_modelos WHERE tim_codigo = 3 AND mod_editar = true;


SET SQL_MODE=@OLD_SQL_MODE;
SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS;
SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS;
